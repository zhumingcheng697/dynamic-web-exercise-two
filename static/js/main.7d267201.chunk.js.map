{"version":3,"sources":["components/Header.js","components/WeatherImage.js","containers/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","WeatherImage","weatherType","icon","faCloudSun","faSun","faCloud","faCloudRain","faSmog","faWind","Home","history","useHistory","useState","isLoading","setIsLoading","weatherData","setWeatherData","URLSearchParams","location","search","get","city","setCity","useEffect","searchParams","axios","then","response","data","catch","error","console","log","useMemo","currentTemp","highTemp","lowTemp","cloudiness","humidity","windSpeed","weather","description","Math","round","main","temp","temp_max","temp_min","clouds","all","wind","speed","style","background","parseInt","slice","opacity","App","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7d267201.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"Header\">\n      <h1>Weather App</h1>\n      <nav>\n        <a href=\"/?city=Shanghai\">Shanghai</a>\n        <a href=\"/?city=New York\">New York</a>\n        <a href=\"/?city=Tokyo\">Tokyo</a>\n        <a href=\"/?city=Moscow\">Moscow</a>\n      </nav>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport {\n  faCloud,\n  faCloudSun,\n  faCloudRain,\n  faSun,\n  faSmog,\n  faWind,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction WeatherImage({ weatherType }) {\n  switch (weatherType) {\n    case \"broken clouds\":\n      return <FontAwesomeIcon icon={faCloudSun} />;\n    case \"clear sky\":\n      return <FontAwesomeIcon icon={faSun} />;\n    case \"few clouds\":\n    case \"scattered clouds\":\n      return <FontAwesomeIcon icon={faCloud} />;\n    case \"light rain\":\n      return <FontAwesomeIcon icon={faCloudRain} />;\n    case \"overcast clouds\":\n      return <FontAwesomeIcon icon={faSmog} />;\n    default:\n      return <FontAwesomeIcon icon={faWind} />;\n  }\n}\n\nexport default WeatherImage;\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport Header from \"../components/Header\";\nimport WeatherImage from \"../components/WeatherImage\";\n\nconst weatherKey = `533b80186fdf8e8d8faa837ee7ada898`;\n\nfunction Home() {\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(true);\n  const [weatherData, setWeatherData] = useState(null);\n  const [city, setCity] = useState(\n    new URLSearchParams(history.location.search).get(\"city\") || \"Shanghai\"\n  );\n\n  useEffect(() => {\n    const searchParams = history.location.search;\n    const urlParams = new URLSearchParams(searchParams);\n    const city = urlParams.get(\"city\");\n    if (city) {\n      setCity(city);\n      setIsLoading(true);\n    }\n  }, [history.location]);\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${weatherKey}`\n      )\n      .then((response) => {\n        setWeatherData(response.data);\n      })\n      .catch((error) => {\n        if (city !== \"Shanghai\") {\n          setCity(`Shanghai`);\n        } else {\n          setIsLoading(false);\n        }\n        console.log(error);\n      });\n  }, [city]);\n\n  const {\n    weatherType,\n    currentTemp,\n    highTemp,\n    lowTemp,\n    cloudiness,\n    humidity,\n    windSpeed,\n  } = useMemo(() => {\n    let weatherType = \"Loading\";\n    let currentTemp = \"0\";\n    let highTemp = \"0\";\n    let lowTemp = \"0\";\n    let cloudiness = \"0\";\n    let humidity = \"0\";\n    let windSpeed = \"0\";\n\n    if (weatherData) {\n      weatherType = `${weatherData.weather[0].description}`;\n      currentTemp = `${Math.round(weatherData.main.temp)}℉`;\n      highTemp = `${Math.round(weatherData.main.temp_max)}℉`;\n      lowTemp = `${Math.round(weatherData.main.temp_min)}℉`;\n      cloudiness = `${weatherData.clouds.all}%`;\n      humidity = `${weatherData.main.humidity}%`;\n      windSpeed = `${weatherData.wind.speed}mph`;\n      setIsLoading(false);\n    }\n\n    return {\n      weatherType,\n      currentTemp,\n      highTemp,\n      lowTemp,\n      cloudiness,\n      humidity,\n      windSpeed,\n    };\n  }, [weatherData]);\n\n  return (\n    <>\n      <Header />\n      <main className=\"Home\">\n        <h2>\n          Weather in <span>{city}</span>\n        </h2>\n        <div className=\"WeatherInfo\">\n          <div\n            className=\"WeatherInfoBasic\"\n            style={{\n              background: `linear-gradient(rgba(${\n                parseInt(currentTemp.slice(0, -1)) > 80\n                  ? \"200,100,50\"\n                  : \"50,20,100\"\n              },${parseInt(cloudiness.slice(0, -1)) / 250 + 0.2}), rgba(${\n                parseInt(currentTemp.slice(0, -1)) > 80 ? \"100,30,10\" : \"5,0,30\"\n              },${parseInt(cloudiness.slice(0, -1)) / 250 + 0.2}))`,\n            }}\n          >\n            <div\n              className=\"WeatherInfoImage\"\n              style={{\n                opacity: isLoading ? \"0\" : \"1\",\n              }}\n            >\n              <WeatherImage weatherType={weatherType} />\n            </div>\n            <p\n              className=\"WeatherInfoType\"\n              style={{\n                opacity: isLoading ? \"0\" : \"1\",\n              }}\n            >\n              {weatherType}\n            </p>\n            <h3 className=\"Label\">Current Temperature: </h3>\n            <p\n              className=\"WeatherInfoTemp\"\n              style={{\n                opacity: isLoading ? \"0\" : \"1\",\n              }}\n            >\n              {currentTemp}\n            </p>\n          </div>\n          <div className=\"WeatherInfoPlus\">\n            <div className=\"WeatherInfoColumn\">\n              <h3 className=\"Label\">High Temperature: </h3>\n              <p\n                className=\"WeatherInfoTextSmall\"\n                style={{\n                  opacity: isLoading ? \"0\" : \"1\",\n                }}\n              >\n                {highTemp}\n              </p>\n              <h3 className=\"Label\">Low Temperature: </h3>\n              <p\n                className=\"WeatherInfoTextSmall\"\n                style={{\n                  opacity: isLoading ? \"0\" : \"1\",\n                }}\n              >\n                {lowTemp}\n              </p>\n            </div>\n            <div className=\"WeatherInfoColumn\">\n              <h3 className=\"Label\">Cloudiness: </h3>\n              <p\n                className=\"WeatherInfoTextSmall\"\n                style={{\n                  opacity: isLoading ? \"0\" : \"1\",\n                }}\n              >\n                {cloudiness}\n              </p>\n              <h3 className=\"Label\">Humidity: </h3>\n              <p\n                className=\"WeatherInfoTextSmall\"\n                style={{\n                  opacity: isLoading ? \"0\" : \"1\",\n                }}\n              >\n                {humidity}\n              </p>\n              <h3 className=\"Label\">Wind Speed: </h3>\n              <p\n                className=\"WeatherInfoTextSmall\"\n                style={{\n                  opacity: isLoading ? \"0\" : \"1\",\n                }}\n              >\n                {windSpeed}\n              </p>\n            </div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Home from \"./containers/Home\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}